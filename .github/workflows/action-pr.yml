name: CI Pipeline for PR

env:
  DISABLE_SWAGGER: "true"

on:
  workflow_dispatch:
  pull_request:

jobs:
  test-and-build-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.19.0"

      - name: Build the Go application
        run: |
          go install github.com/swaggo/swag/cmd/swag@v1.8.12 && swag init
          go get
          CGO_ENABLED=0 go build -o ./test-api
          ls -lah

      - name: Run Go tests
        run: |
          TEST_MODE=true go test -v ./...

      - name: Fetch all branches
        run: git fetch origin +refs/heads/*:refs/remotes/origin/*

      - name: Get list of changed files
        id: changed-files
        run: |
          echo "$(git diff --name-only origin/${{ github.base_ref }} origin/${{ github.head_ref }})" > changed-files.txt
          echo "Changed files.txt"
          cat changed-files.txt
          
      - name: Filter Go files
        id: filter-go-files
        run: |
          grep '.go$' changed-files.txt > go-files.txt || true
          echo "=== Go files ==="
          cat go-files.txt
          if [[ -s go-files.txt ]]; then
            echo "CHANGED_GO_FILES=changed" >> $GITHUB_ENV
          else
            echo "go-files.txt is empty."
          fi          

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.58.1

      - name: Run static and security checks
        if: env.CHANGED_GO_FILES != ''
        run: |
          echo "=== Go files ==="
          cat go-files.txt
          golangci-lint run $(cat go-files.txt)

      - name: Run tests and capture coverage
        if: env.CHANGED_GO_FILES != ''
        run: |
          echo "=== Test files ==="
          # Read file names from the text file
          while IFS= read -r file; do
            if [[ "$file" == *.go && "$file" != *_test.go ]]; then
              echo "==== $file"
              # Extract test functions from each file
              PACKAGE_NAME=$(dirname "$file")
              TEST_FUNCTIONS=$(grep -oE '^func +Test[A-Za-z0-9_]+\(' "$file" | grep -vE '^\s*//' | sed -E 's/func +(Test[A-Za-z0-9_]+)\(.*\)/\1/' | paste -sd "|" - | tr -d '()' | sed 's/func //g')
              # Run tests for each file
              go test -v "./$PACKAGE_NAME" -run "$(echo ${TEST_FUNCTIONS} | tr -d ' ' | sed 's/|/|/g')" -coverprofile=coverage_tmp.out
              # Merge coverage results into coverage.out
              cat coverage_tmp.out >> coverage.out
              # Remove temporary coverage file
              rm coverage_tmp.out
            fi
          done < go-files.txt
          if [ ! -f "coverage.out" ]; then
              echo "No coverage data available because PR doesn't have new golang code (not include test files)."
          else
              go tool cover -func=coverage.out
          fi

      - name: Check coverage threshold
        if: env.CHANGED_GO_FILES != ''
        run: |
          if [ ! -f "coverage.out" ]; then
              echo "No coverage data available because PR doesn't have new golang code (not include test files)."
          else
            coverage=$(cat coverage.out | grep total | awk '{print $3}' | tr -d '%')
            if [ "$coverage" -lt "30" ]; then
              echo "Coverage is below threshold. Current coverage is $coverage%"
              exit 1
            else
              echo "Coverage is above threshold. Current coverage is $coverage%"
            fi
          fi